==== 2/23/22 ====

* Move Trello Cards.
* Go through notes below.
* Mock some APIs.
* Sketch some classes and functions and variables.
* Talk about possible learning avenues / materials, have 1-day discussions?
  - Requirement Gathering
      https://www.cms-garden.org/de/file/treeswing-illustration
  - OOD (Object Oriented Design) / OOP (Object Oriented Programming) (and where Functional fits in)
  - Patterns (and anti-patterns)
  - Refactoring
  - Tests
  - Style (names, etc.)
  - Thread Safety (& Concurrency)
  - ?


+ 1.  Make a note somewhere to never check in a personal directory, such as your .idea/ configuration.
-- Remove .idea/ from the repo, otherwise when somebody else (like me) checks out the code they overwrite their own .idea/ dir.
   - Some of your settings in misc.xml might not match my preferences.
   - If the workspace.xml gets checked in then local file paths also get checked in as well as your local
     sandbox entries.
   - When I checkout Intellij gives me error messages.


+ 2.  Always have a .gitignore file.
-- Add a .gitignore file with "/.idea/" inside.
   - The easiest way to put things in .gitignore is to right-click on a file or directory in intellij and in the menu
   Git > Add to gitignore > .gitignore
   - A useful site is https://www.toptal.com/developers/gitignore .
     You can type in whatever you are using and it creates a (sometimes long) .gitignore that you can copy & paste.


+ 3.  Keep the end goal in mind.
+ -- In the end, we want to have:
   1. A Python API that can be used by a non-programmer.
   2. A simple startup and shutdown sequence that can be used by a non-sysadmin.

 -- Early in any API project, often before coding, think about overall goals.  We put some of this in the slides.
   1. What 'work' absolutely needs to be done.
      - A broad overview is on slide #5.
   2. What functionality is needed to get that work done.
      - A general list is on slide #6 and an outline is on slide #7.
   3. The shortest and easiest path possible to invoke that functionality.
      - This is based, in part, upon the intended user.  Slide #9.
+ -- Sometimes it helps to have a 'mockup' of the API before you start.
   - I should have done this with you early on.
   - I think that doing all of the demo/test code may have gotten you sidetracked and trying to 'adapt'
     it was the wrong approach.  That is my fault.  I haven't really trained a new developer on a project for 10 years.
-- A 'mockup' API can be used in tests, which can help keep the end goal in sight.


+ 4.  I think that you have it all figured out now, but we should write up some mock API just for the exercise.

+ 1. Define the work, mock some functions, then try to combine or chain functions to facilitate use.

 * test_cas_handler.py is good.  It indicates something that can be simplified for the user in a final API.
 - I am not sure what test_load_file.py is trying to do.  The method names are misleading.
 - test_receiver.py looks good, but there is no 'test'.  To actually 'test' another function could be put in receiver.py
 - Why is test_xmi_handler.py creating a sender?


+ "Story" 1:  As a non-developer, I want to send my data to the universe so that some other process can use it.
 A. The functional requirements (parameters, do-ers) to send a cas to artemis.
 B. The easiest way for a user to do A.
 C. How a user is going to learn to do A.
 - Tasks ...

+ "Story" 2:  As a non-developer, I want to get data from the universe so that my process can use it.
 D. The functional requirements (parameters, do-ers) to get a cas from artemis.
 E. The easiest way for a user to do D.
 F. How a user is going to learn to do D.
- Tasks ...

==== 2/24/22 ====

* Testing

- Stories 1, 2 above.  Basic Send, Receive cas.

A. Write a sender test:          pbj_test_send_cas
  1. Read an example XMI file,
  2. Send.

B. Write a receiver test:
  1. Start Receiver,
  2. Print Sentences from any received cas.

C. Run B, A.
** Test A is just testing for error / no error.  Test B is for error / no error and function.
   Testing B,A adds test of function of A.  Obviously the standard test will be "start B, start A"
** This will require some new code to implement the functionality required by the test.  Test-First Development :^)
** Make another test (in another sender test file) that sends more than one XMI file.


Story 4: As a non-developer, I want to tell the universe when I have no more data (so that...).
Story 5: As a non-developer, I want my process to shut down when the universe has no more data for it (so that...).
- Basic Shut Down.

D. Write a "shut down receiver" sender test:
  1. Send a "shut down" signal.

E. Write a "shut down receiver" receiver test:
  1. Start Receiver,
  2. Print sentences from an received cas.
  3. Print message when a "shut down" is received.

F. Run E, D.  Run E, A, D.
** This will require some new code to implement the functionality required by the test.  Test-First Development :^)


Story 6: As a non-developer, I want some other computer to process my data.
- Hostname specification.

G. Write a "specify hostname" sender test:
  1. Read an example XMI file,
  2. Send to some host.
  * For now, just specify localhost as if it is the name of a remote host.

H. Run E, G.
** This will require some new code to implement the functionality required by the test.


We can plan something for next week along the lines of 1/2 day together on research, design and development,
 then 1/2 day for you writing test instructions, code comments and readme information.

- Simplified Startup.  Bash script?  Python script?
- Simplified cas Type get(..).  Will also need simplified add(..).  Remove?
- Usable pbj process wrappers.  We can choose some online resources and make wrappers to use info from a cas.





 "Story" 3:  As a python ML user, I want to [Story 1 and/or Story 2] so that [Story 1 and/or Story 2].
 G. The functional requirements to start artemis.
 H. The easiest way for a user to do G.
 I. How a user is going to learn to do G.
 - Tasks ...

